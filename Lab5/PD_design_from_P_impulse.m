function [kp, kd] = PD_design_from_P_impulse(kp_0, y1, t1, y2, t2, offset, zeta, wn);
% Active Gimbal Lab Matlab Script
% PD controller design based on an impulse response generated by 
% a pure proportional control
%
% Syntax:
% [kp, kd] = PD_design_from_P_impulse(kp_0, y1, t1, y2, t2, offset, zeta, wn);
% kp_0 : initial P control gain
% y1 : amplitude of the first peak
% t1 : time of the first peak
% y2 : amplitude of the second peak
% t2 : time of the second peak
% offset : DC offset of the waveform from 0
% zeta : desired closed-loop damping ratio for PD (between 0 and 1)
% wn : desired closed-loop natural frequency for PD (in rad/s = 2*pi*f)

%           Version 2.0 (11/01/2018) H.C.
%           Version 3.0 (10/23/2021) H.C.

disp(' ');
disp('*** PD controller design from P control response ***');
disp(' ');

fprintf('Initial Kp = %6.2f\n', kp_0);

% remove offset from amplitudes
y1 = y1 - offset;
y2 = y2 - offset;

% determine damped period and frequency
td = t2 - t1;
wd = 2 * pi/td;

sigma = log( y1/y2 )/td;

% estimate natural frequency and damping ratio from the impulse response
wn_0 = sqrt( sigma^2+wd^2 );
zeta_0 = sqrt( 1-(wd^2/wn_0^2) );

fprintf('Initial damping ratio = %6.2f\n', zeta_0);
fprintf('Initial natural frequency = %6.2f (rad/s)\n', wn_0);
disp(' ');

fprintf('Desired damping ratio = %6.2f\n', zeta);
fprintf('Desired natural frequency = %6.2f (rad/s)\n', wn);
disp(' ');

% calculate kp and kd to achieve the desired dynamic response
kp = ( wn/wn_0 )^2 * kp_0;
kd = ( 2 * kp_0/wn_0^2 ) * ( zeta*wn - zeta_0*wn_0 );

disp('*** Computed Kp and Kd for PD controller: ');
fprintf('Kp = %6.2f\n',kp);
fprintf('Kd = %6.2f\n\n', kd);

end
