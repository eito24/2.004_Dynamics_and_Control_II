/**********************************************************************************

Arduino code to control a two-wheeled self-balancing robot (a.k.a. Segway robot)
MIT Department of Mechanical Engineering, 2.004
Rev. 1.0 -- 10/20/2018 H.C.
Rev. 1.2 -- 10/26/2018 H.C.

***********************************************************************************/

// I2Cdev and MPU6050 must be installed as libraries, or else the .cpp/.h files
// for both classes must be in the include path of your project
#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps20.h"

// Arduino Wire library is required if I2Cdev I2CDEV_ARDUINO_WIRE implementation
// is used in I2Cdev.h
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
  #include "Wire.h"
#endif

// ================================================================
// ===               CONTROLLER TYPE AND GAINS                  ===
// ================================================================

//#define PID
#define FULL_STATE

// Provide PID controller gains here
float kp = 0.0;
float kd = 0.0;
float ki = 0.0;

// Provide FULL STATE controller gains here
float k1 = 40.0;    // theta
float k2 = 4.0;     // theta dot
float k3 = 25.0;    // x
float k4 = 5.0;    // x dot

// ================================================================
// ===               SERIAL OUTPUT CONTROL                      ===
// ================================================================

// Switch between built-in Serial Plotter and Matlab streaming
// comment out both to disable serial output

#define PRINT_DATA
//#define MATLAB_SERIAL_READ

// ================================================================
// ===               SETPOINT TYPE                              ===
// ================================================================

// Define setpoint, if all are commented out then the setpoint is 0 degree

//#define SQUARE_WAVE
//#define SINE_WAVE
//#define CIRCLE
#define SONAR_TURN
//#define FIGURE_8
//#define RACE


// ================================================================
// ===        SOFTWARE ADJUSTMENTS FOR TILT AND LF-RT BALANCE   ===
// ================================================================

float tilt_offset = 1.5;   // tilt angle offset
float lr_offset = 0.2;   // offset for adjusting left and right motor pwm
#define delay_start_ms 1000

// ================================================================
// ===               MPU6050 VARIABLE DEFINITION                ===
// ================================================================

MPU6050 mpu;

#define IMU_pin 2   // MPU6050 interrupt pin to pin 2 of Arduino UNO (INT 0)

int16_t ax, ay, az;
int16_t gx, gy, gz;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorFloat gravity;    // [x, y, z]            gravity vector
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
  mpuInterrupt = true;
}

// ================================================================
// ===               DFROBOT MOTOR SHIELD DEFINITION            ===
// ================================================================

const int
// Left motor connected to M1
PWM_A   = 10,
DIR_A   = 12,

// Right motor connected to M2
PWM_B   = 11,
DIR_B   = 13;

// ================================================================
// ===               ENCODER DEFINITION                         ===
// ================================================================

// Encoder pins (here we only use the M1 (RT) motor encoder for wheel measurement
// This is an encoder with 360 CRP on motor shaft and 360*34 = 12,240 CPR on the output shaft

#define C2D 64    // encoder counts to degrees factor with 2x resolution implementation
#define LF 0    // LEFT side, opposite to IMU
#define RT 1    // RIGHT side, 

//volatile long RotationCoder[2];    // for debugging, not needed

// We use M1 (LF) encoder only with channel A to D3 (INT1)and B to D4
const byte encoder0pinA = 3;  //LF
const byte encoder0pinB = 4;
boolean encoder0PinALast;
volatile int Lduration = 0;
boolean LcoderDir = true;
void LwheelEncoder(void);

// M2 (RT) encoder 
//const byte encoder1pinA = 3;  //RT
//const byte encoder1pinB = 4;
//boolean encoder1PinALast;
//volatile int Rduration = 0;
//boolean RcoderDir = true;
//void RwheelEncoder(void);

float wheel_pos = 0.0, wheel_speed = 0.0, pre_wheel_pos = 0.0, filt_speed = 0.0;

// ================================================================
// ===               TILT ANGLE AND PID VARIABLES               ===
// ================================================================


// Pots connected to A1 and A2 for fine-tuning
int TRIM_POT = A2;
int BALANCE_POT = A1;

float yaw, pitch, roll, roll_rate, pitch_rate;
float error, sum_error = 0.0, d_error = 0.0, filt_d_error = 0.0, error_pre;
float alpha = 0.25;    // low pass filter constant
unsigned long timer;
double loop_time = 0.015;
float Pcontrol, Icontrol, Dcontrol;
int deadband = 0;
float pwm = 0.0, pwm_L, pwm_R;
float set_point = 0.0;   // tilt angle set point
float trim_val, bal_val;  // pot adjustments
float z_accel = 1.0;

//int PULSE_pin = 7;  // ultrasonic range finder pin pulse input
//unsigned long pw;
int SONAR = A3;
float dist = 0.0, filt_dist = 0.0;

//#include <SoftwareSerial.h>  // It does not work well with interrupts
//#include "TFMini.h"   // TFMini LIDAR
//
//// Setup software serial port 
//SoftwareSerial mySerial(9, 8);      // Uno RX (TFMINI TX), Uno TX (TFMINI RX)
//TFMini tfmini;
//uint16_t distance,strength;
 
// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {
  // join I2C bus (I2Cdev library doesn't do this automatically)
  #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    Wire.begin();
    TWBR = 24; // 400kHz I2C clock (200kHz if CPU is 8MHz)
  #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
    Fastwire::setup(400, true);
  #endif

  Serial.begin(115200);

//  #ifdef GET_DIST
//    mySerial.begin(TFMINI_BAUDRATE);
//    tfmini.begin(&mySerial);    
//  #endif
//  pinMode(PULSE_pin, INPUT);

  // initialize IMU
  mpu.initialize();
  devStatus = mpu.dmpInitialize();

  /* Supply your own gyro offsets here, scaled for min sensitivity */
  /* Refer to your robot # and calibration spreadsheet */
  /* Run MPU6050_cal.ino to re-calibrate your IMU if needed */

  mpu.setXAccelOffset(222);
  mpu.setYAccelOffset(-1143);
  mpu.setZAccelOffset(977);
  mpu.setXGyroOffset(35);
  mpu.setYGyroOffset(-49);
  mpu.setZGyroOffset(6);

  // make sure it worked (returns 0 if so)
  if (devStatus == 0) {
    mpu.setDMPEnabled(true);

    pinMode(IMU_pin,INPUT);
    // enable Arduino interrupt detection
    attachInterrupt(digitalPinToInterrupt(IMU_pin), dmpDataReady, RISING);
    mpuIntStatus = mpu.getIntStatus();

    // set our DMP Ready flag so the main loop() function knows it's okay to use it
    dmpReady = true;

    // get expected DMP packet size for later comparison
    packetSize = mpu.dmpGetFIFOPacketSize();
  } else {
//     ERROR!
//     1 = initial memory load failed
//     2 = DMP configuration updates failed
//     (if it's going to break, usually the code will be 1)
     Serial.print(F("DMP Initialization failed (code "));
     Serial.print(devStatus);
     Serial.println(F(")"));
  }

  // configure motor shield A & B outputs
  pinMode(PWM_A, OUTPUT);
  pinMode(PWM_B, OUTPUT);
  pinMode(DIR_A, OUTPUT);
  pinMode(DIR_B, OUTPUT);

  #ifdef FULL_STATE
  // initialize encoder
  // 2x resolution of encoder, that is, 24,480 counts per wheel revolution
    LcoderDir = true;     // LF
    pinMode(encoder0pinB,INPUT);
    pinMode(encoder0pinA,INPUT);
    attachInterrupt(digitalPinToInterrupt(encoder0pinA), LwheelEncoder, CHANGE);   
    
//  RcoderDir = true;       // RT, comment out this part if only one encoder is used
//  pinMode(encoder1pinB,INPUT);
//  pinMode(encoder1pinA,INPUT);
//  attachInterrupt(digitalPinToInterrupt(encoder1pinA), RwheelEncoder, CHANGE);   
  #endif

// Set PWM frequency (to avoid audible noise use the highest frequency)
// uncomment the line with the desired frequency 

//  TCCR2B = TCCR2B & B11111000 | B00000001;    // set timer 2 divisor to     1 for PWM frequency of 31372.55 Hz
//  TCCR2B = TCCR2B & B11111000 | B00000010;    // set timer 2 divisor to     8 for PWM frequency of  3921.16 Hz
//  TCCR2B = TCCR2B & B11111000 | B00000011;    // set timer 2 divisor to    32 for PWM frequency of   980.39 Hz
//  TCCR2B = TCCR2B & B11111000 | B00000100;    // set timer 2 divisor to    64 for PWM frequency of   490.20 Hz (The DEFAULT)
//  TCCR2B = TCCR2B & B11111000 | B00000101;    // set timer 2 divisor to   128 for PWM frequency of   245.10 Hz
//  TCCR2B = TCCR2B & B11111000 | B00000110;    // set timer 2 divisor to   256 for PWM frequency of   122.55 Hz
//  TCCR2B = TCCR2B & B11111000 | B00000111;    // set timer 2 divisor to  1024 for PWM frequency of    30.64 Hz
delay(1000);    // delay one second
}

// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
  
  timer = millis();

// ================================================================
// ===                    READ DATA FROM POTS                   ===
// ================================================================
  trim_val = (analogRead(TRIM_POT)-512.0)/256.0;  // +/- 2 degrees
  bal_val = map(analogRead(BALANCE_POT), 0, 1023, 75, 125)/100.0;   // constrain to +/- 25%

// ================================================================
// ===                    GET DATA FROM MPU6050                 ===
// ================================================================

  // if programming failed, don't try to do anything
  if (!dmpReady) return;

  // wait for MPU interrupt or extra packet(s) available
  while (!mpuInterrupt && fifoCount < packetSize) {
    ;
  }

  // reset interrupt flag and get INT_STATUS byte
  mpuInterrupt = false;
  mpuIntStatus = mpu.getIntStatus();

  // get current FIFO count
  fifoCount = mpu.getFIFOCount();

  // check for overflow (this should never happen unless our code is too inefficient)
  if ((mpuIntStatus & 0x10) || fifoCount == 1024) {
    // reset so we can continue cleanly
    mpu.resetFIFO();
  }
  // otherwise, check for DMP data ready interrupt (this should happen frequently)
  else if (mpuIntStatus & 0x02) {
    // wait for correct available data length, should be a VERY short wait
    while (fifoCount < packetSize) fifoCount = mpu.getFIFOCount();
    // read a packet from FIFO
    mpu.getFIFOBytes(fifoBuffer, packetSize);
    // track FIFO count here in case there is > 1 packet available
    // (this lets us immediately read more without waiting for an interrupt)
    fifoCount -= packetSize;

    // display Yaw, Pitch, and Roll angles in degrees
    mpu.dmpGetQuaternion(&q, fifoBuffer);
    mpu.dmpGetGravity(&gravity, &q);
    mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);

    // based on IMU orientation, pitch angle and pitch rate are the two measurements needed
//    yaw = ypr[0] * 180 / M_PI;
    pitch = ypr[1] * 180 / M_PI;
//    roll =  ypr[2] * 180 / M_PI;

    // get pitch rate from the respective gyro axes
    mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
    pitch_rate = 1 * gy / 16.4; // full scale +/- 2000 deg/s for 16 bit AD
    z_accel = az/16384.0;

// ================================================================
// ===                    GET SONAR DISTANCE                    ===
// ================================================================

    dist = (analogRead(SONAR)/2.0)*2.54;    // cm
    filt_dist = 0.1 * dist + (1 - 0.1) * filt_dist;

// ================================================================
// ===                    GET SETPOINT                          ===
// ================================================================

    // define set point as square wave input here to give +/- tilt_offset deg tilt angles
    #ifdef SQUARE_WAVE
    if (millis() >= delay_start_ms){
        if (millis() % 4000 < 2000)
          set_point = tilt_offset;
        else
          set_point = -1*tilt_offset;
    }
    #endif

    // define set point as a sine wave with an amplitude of tilt_offset and frequency of 1.0 Hz
    #ifdef SINE_WAVE
        if (millis() >= delay_start_ms){
          set_point = tilt_offset*sin(1.0*(2*M_PI)*millis()/1000.0);
        }
    #endif

    // define set point as a circle with tilt_offset and lr_offset
    #ifdef CIRCLE
        if (millis() >= delay_start_ms){
          set_point = tilt_offset;
          bal_val -= lr_offset;
        }
    #endif

    #ifdef SONAR_TURN
        if (millis() >= delay_start_ms){
          if (filt_dist >= 30)  // cm
            set_point = tilt_offset;
          else
            bal_val -= lr_offset;
        }
    #endif

    #ifdef FIGURE_8
        if (millis() >= delay_start_ms){
          if (millis() % 15000 < 6000){
            set_point = tilt_offset;
            bal_val -= lr_offset;
          }
          else if (millis() % 15000 > 6000 && millis() % 15000 < 9000){
            set_point = tilt_offset;
            bal_val += 0;
          }
          else{
            set_point = tilt_offset;
            bal_val += lr_offset;
          }
        }
    #endif

    #ifdef RACE
    // int is limited to 32767, if more than 32 seconds, use long or unsigned long instead
    int t1 = 6000;
    int t2 = 8000;
    int t3 = 12000;
    int t4 = 14100;
    int t5 = 19000;
    // if you want it start right away set delay_start_ms = 0;
        if (millis() >= delay_start_ms){
          if (millis() < t1){
            set_point = tilt_offset;
            bal_val += 0;       // add 0 offset, same as bal_val = bal_val;
          }
          else if (millis() >= t1 && millis() < t2){
            set_point = tilt_offset;
            bal_val += lr_offset;
          }
          else if (millis() >= t2 && millis() < t3){
            set_point = tilt_offset;
            bal_val -= lr_offset;
          }
          else if (millis() >= t3 && millis() < t4){
            set_point = tilt_offset;
            bal_val += lr_offset;
          }
          else if (millis() >= t4 && millis() < t5){
            set_point = tilt_offset;
            bal_val += 0;
          }
          else{
            set_point = trim_val;   // stop the robot
            bal_val += 0;
          }
        }
    #endif

    
// ================================================================
// ===                    CONTROLLER CODE                       ===
// ================================================================

    // PID controller code
    error = (set_point - pitch) + trim_val;
    d_error = (error - error_pre) / loop_time;
    // 1st order filter to clean up noise
    filt_d_error = alpha * d_error + (1 - alpha) * filt_d_error;
    error_pre = error;
    sum_error += error * loop_time;

#ifdef PID
    Pcontrol = error * kp;
    Icontrol = sum_error * ki;
    Dcontrol = pitch_rate * kd;

    Icontrol = constrain(Icontrol, -150, 150);    // anti-windup for integrator
    pwm = Pcontrol + Icontrol + Dcontrol;
#endif

#ifdef FULL_STATE
    // wheel position and speed based on LF motor encoder
    wheel_pos += Lduration;
//    wheel_pos += (Lduration - Rduration)*0.5; // if both encoders are used
    wheel_pos = -1*wheel_pos / C2D;    // convert to degrees and change direction
    if (bal_val > 1.1)
      wheel_pos = (2-bal_val)*wheel_pos;
     else if (bal_val < 0.9)
      wheel_pos = (2-bal_val)*wheel_pos;
     else
      ; 
    wheel_speed = (wheel_pos - pre_wheel_pos);
    filt_speed = alpha * wheel_speed + (1 - alpha) * filt_speed;
    pre_wheel_pos = wheel_pos;
    pwm = error*k1 + pitch_rate*k2 + wheel_pos*k3 + wheel_speed*k4; 
#endif

// ================================================================
// ===                    MOTOR PWM CODE                        ===
// ================================================================

    // set the correct direction
    if (pwm > 0){
      digitalWrite(DIR_A, LOW);
      digitalWrite(DIR_B, HIGH);
    }
    else{
      digitalWrite(DIR_A, HIGH);
      digitalWrite(DIR_B, LOW);
    }

    // constrain pwm to +/- 255
     pwm = constrain(pwm, -255, 255);

     // minumum pwm to overcome deadband   
    if(deadband > 0){
      if(pwm < deadband && pwm >= 0)                               
        pwm = deadband;
      if(pwm > -deadband && pwm < 0)
        pwm = -deadband;
    }

    // set pwm to 0 to stop both motors if tilt angle exceeds 15 degrees
    if (abs(pitch) >= 15) pwm = 0.0;

//    pwm = 0;

    // Left-Right motor pwm adjustments
    pwm_L = pwm*bal_val;
    pwm_R = pwm*(2.0 - bal_val);

    pwm_L = constrain(pwm_L, -255, 255);
    pwm_R = constrain(pwm_R, -255, 255);
    
    analogWrite(PWM_A, (int) abs(pwm_L));     // Set the speed of the left motor
    analogWrite(PWM_B, (int) abs(pwm_R));     // Set the speed of the right motor
        
#ifdef PRINT_DATA
//    Serial.print(set_point);  Serial.print("\t");
//    Serial.print(pitch);  Serial.print("\t");
//    Serial.print(error);  Serial.print("\t");
//    Serial.print(pitch_rate); Serial.print("\t");
//    Serial.print(pwm);  Serial.print("\t");
//    Serial.print(loop_time,6); Serial.print("\t");
//    Serial.print(wheel_pos); Serial.print("\t");
//    Serial.print(wheel_speed); Serial.print("\t");
//    Serial.print(bal_val); Serial.print("\t");
//    Serial.print(trim_val); Serial.print("\t");
//    Serial.print(pwm_L); Serial.print("\t");
//    Serial.print(pwm_R); Serial.print("\t");
    Serial.print(dist); Serial.print("\t");
    Serial.print(filt_dist); Serial.print("\t");
    Serial.print("\n");
#endif

#ifdef MATLAB_SERIAL_READ
    Serial.print(timer / 1000.0);   Serial.print("\t");
    Serial.print(set_point);    Serial.print("\t");
    Serial.print(pitch);    Serial.print("\t");
    Serial.print(pitch_rate);
    Serial.print("\n");
#endif
  }
  delay(2);
  loop_time = (millis() - timer) / 1000.0;  //compute actual sample time

  Lduration = 0;
//  Rduration = 0;
}

// ================================================================
// ===                    WHEEL DIRECTION AND DURATION          ===
// ================================================================

void LwheelEncoder()
{
  boolean Lstate = digitalRead(encoder0pinA);
  if(encoder0PinALast == LOW && Lstate == HIGH)
  {
    boolean val = digitalRead(encoder0pinB);
    if(val == LOW && LcoderDir)  LcoderDir = false; //Reverse
    else if(val == HIGH && !LcoderDir)  LcoderDir = true;  //Forward
  }
  encoder0PinALast = Lstate;

  if(!LcoderDir)  Lduration--;
  else  Lduration++;

//  if(true)  RotationCoder[LF] ++;
//  else RotationCoder[LF] = 0;
}

//void RwheelEncoder()
//{
//  boolean Rstate = digitalRead(encoder1pinA);
//  if(encoder1PinALast == LOW && Rstate == HIGH)
//  {
//    boolean val = digitalRead(encoder1pinB);
//    if(val == LOW && RcoderDir)  RcoderDir = false; //Reverse
//    else if(val == HIGH && !RcoderDir)  RcoderDir = true;  //Forward
//  }
//  encoder1PinALast = Rstate;
//
//  if(!RcoderDir)  Rduration--;
//  else  Rduration++;
//
////  if(true)  RotationCoder[RT] ++;
////  else RotationCoder[RT] = 0;
//}
